import React, { createContext, useState, useContext, useEffect } from 'react';
import { useTranslation } from 'react-i18next';

const LanguageContext = createContext({
  locale: 'ru', // Default value to prevent crash
  setLocale: () => console.warn('LanguageProvider not found'),
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —è–∑—ã–∫–∞
const getInitialLanguage = () => {
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!)
  const userChoice = localStorage.getItem('userLanguageChoice');
  if (userChoice && ['ru', 'en', 'pl'].includes(userChoice)) {
    console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userChoice);
    return userChoice;
  }

  // 2. –ï—Å–ª–∏ –≤—ã–±–æ—Ä–∞ –Ω–µ—Ç, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞
  const browserLang = navigator.language || navigator.languages[0];
  const langCode = browserLang.toLowerCase().split('-')[0];
  
  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
  const supportedLanguages = ['ru', 'en', 'pl'];
  
  // –ï—Å–ª–∏ —è–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (supportedLanguages.includes(langCode)) {
    console.log('üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞:', langCode);
    return langCode;
  }
  
  // 3. –ò–Ω–∞—á–µ fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π
  console.log('üîÑ Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫');
  return 'ru';
};

export const LanguageProvider = ({ children }) => {
  const [locale, setLocale] = useState(getInitialLanguage());
  const { i18n } = useTranslation();

  useEffect(() => {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å i18next –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (i18n.language !== locale) {
      i18n.changeLanguage(locale);
    }
  }, [i18n, locale]);

  const handleSetLocale = (newLocale) => {
    console.log('üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —è–∑—ã–∫:', newLocale);
    setLocale(newLocale);
    i18n.changeLanguage(newLocale);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª—é—á
    localStorage.setItem('userLanguageChoice', newLocale);
    
    // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è i18next —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    localStorage.setItem('i18nextLng', newLocale);
  };

  return (
    <LanguageContext.Provider value={{ locale, setLocale: handleSetLocale }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => useContext(LanguageContext);
